<?php

/**
 * BaseProyecto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idProyecto
 * @property integer $idAdministrador
 * @property string $Nombre
 * @property string $Descripcion
 * @property string $Comentarios
 * @property timestamp $FCreacion
 * @property timestamp $FModificacion
 * @property timestamp $FFinalizacion
 * @property boolean $Activo
 * @property Persona $idAdministrador
 * @property Doctrine_Collection $ProductBacklogs
 * @property Doctrine_Collection $Equipoes
 * @property Doctrine_Collection $Reunions
 * @property Doctrine_Collection $HistorialChats
 * @property Doctrine_Collection $Links
 * @property Doctrine_Collection $Cambios
 * 
 * @method integer             getIdProyecto()      Returns the current record's "idProyecto" value
 * @method Persona             getIdAdministrador() Returns the current record's "idAdministrador" value
 * @method string              getNombre()          Returns the current record's "Nombre" value
 * @method string              getDescripcion()     Returns the current record's "Descripcion" value
 * @method string              getComentarios()     Returns the current record's "Comentarios" value
 * @method timestamp           getFCreacion()       Returns the current record's "FCreacion" value
 * @method timestamp           getFModificacion()   Returns the current record's "FModificacion" value
 * @method timestamp           getFFinalizacion()   Returns the current record's "FFinalizacion" value
 * @method boolean             getActivo()          Returns the current record's "Activo" value
 * @method Doctrine_Collection getProductBacklogs() Returns the current record's "ProductBacklogs" collection
 * @method Doctrine_Collection getEquipoes()        Returns the current record's "Equipoes" collection
 * @method Doctrine_Collection getReunions()        Returns the current record's "Reunions" collection
 * @method Doctrine_Collection getHistorialChats()  Returns the current record's "HistorialChats" collection
 * @method Doctrine_Collection getLinks()           Returns the current record's "Links" collection
 * @method Doctrine_Collection getCambios()         Returns the current record's "Cambios" collection
 * @method Proyecto            setIdProyecto()      Sets the current record's "idProyecto" value
 * @method Proyecto            setIdAdministrador() Sets the current record's "idAdministrador" value
 * @method Proyecto            setNombre()          Sets the current record's "Nombre" value
 * @method Proyecto            setDescripcion()     Sets the current record's "Descripcion" value
 * @method Proyecto            setComentarios()     Sets the current record's "Comentarios" value
 * @method Proyecto            setFCreacion()       Sets the current record's "FCreacion" value
 * @method Proyecto            setFModificacion()   Sets the current record's "FModificacion" value
 * @method Proyecto            setFFinalizacion()   Sets the current record's "FFinalizacion" value
 * @method Proyecto            setActivo()          Sets the current record's "Activo" value
 * @method Proyecto            setProductBacklogs() Sets the current record's "ProductBacklogs" collection
 * @method Proyecto            setEquipoes()        Sets the current record's "Equipoes" collection
 * @method Proyecto            setReunions()        Sets the current record's "Reunions" collection
 * @method Proyecto            setHistorialChats()  Sets the current record's "HistorialChats" collection
 * @method Proyecto            setLinks()           Sets the current record's "Links" collection
 * @method Proyecto            setCambios()         Sets the current record's "Cambios" collection
 * 
 * @package    scrum
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProyecto extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('proyecto');
        $this->hasColumn('idProyecto', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('idAdministrador', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('Nombre', 'string', 45, array(
             'type' => 'string',
             'length' => 45,
             ));
        $this->hasColumn('Descripcion', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('Comentarios', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('FCreacion', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('FModificacion', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('FFinalizacion', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('Activo', 'boolean', null, array(
             'type' => 'boolean',
             ));


        $this->index('fk_Proyecto_Persona1_idx', array(
             'fields' => 
             array(
              0 => 'idAdministrador',
             ),
             ));
        $this->option('collate', 'latin1_spanish_ci');
        $this->option('charset', 'latin1');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Persona as idAdministrador', array(
             'local' => 'idAdministrador',
             'foreign' => 'idPersona'));

        $this->hasMany('ProductBacklog as ProductBacklogs', array(
             'local' => 'idProyecto',
             'foreign' => 'idProyecto'));

        $this->hasMany('Equipo as Equipoes', array(
             'local' => 'idProyecto',
             'foreign' => 'idProyecto'));

        $this->hasMany('Reunion as Reunions', array(
             'local' => 'idProyecto',
             'foreign' => 'idProyecto'));

        $this->hasMany('HistorialChat as HistorialChats', array(
             'local' => 'idProyecto',
             'foreign' => 'idProyecto'));

        $this->hasMany('Link as Links', array(
             'local' => 'idProyecto',
             'foreign' => 'idProyecto'));

        $this->hasMany('Cambio as Cambios', array(
             'local' => 'idProyecto',
             'foreign' => 'Proyecto_idProyecto'));
    }
}